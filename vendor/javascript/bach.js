// bach@0.5.0 downloaded from https://ga.jspm.io/npm:bach@0.5.0/index.js

import r from"lodash.initial";import e from"lodash.last";import t from"async-done";import a from"now-and-later";import n from"assert";import l from"lodash.filter";import o from"lodash.map";import i from"lodash.flatten";import s from"lodash.foreach";import v from"async-settle";var u={};var f=n;var m=l;var c=o;var d=i;var p=s;function noop(){}function getExtensions(r){if("function"!==typeof r)return r}function buildOnSettled(r){"function"!==typeof r&&(r=noop);function onSettled(e,t){if(e)return r(e,null);var a=m(t,{state:"error"});var n=m(t,{state:"success"});var l=null;a.length&&(l=c(a,"value"));var o=null;n.length&&(o=c(n,"value"));r(l,o)}return onSettled}function verifyArguments(r){r=d(r);var e=r.length-1;f.ok(r.length,"A set of functions to combine is required");p(r,(function(r,t){var a="function"===typeof r;if(!a&&t!==e){var n="Only functions can be combined, got "+typeof r+" for argument "+t;f.ok(a,n)}}));return r}u={getExtensions:getExtensions,onSettled:buildOnSettled,verifyArguments:verifyArguments};var g=u;var S={};var y=r;var b=e;var h=t;var x=a;var A=g;function buildSeries(){var r=A.verifyArguments(arguments);var e=A.getExtensions(b(r));e&&(r=y(r));function series(t){x.mapSeries(r,h,e,t)}return series}S=buildSeries;var E=S;var P={};var O=r;var k=e;var q=t;var w=a;var j=g;function buildParallel(){var r=j.verifyArguments(arguments);var e=j.getExtensions(k(r));e&&(r=O(r));function parallel(t){w.map(r,q,e,t)}return parallel}P=buildParallel;var z=P;var B={};var C=r;var D=e;var F=v;var G=a;var H=g;function buildSettleSeries(){var r=H.verifyArguments(arguments);var e=H.getExtensions(D(r));e&&(r=C(r));function settleSeries(t){var a=H.onSettled(t);G.mapSeries(r,F,e,a)}return settleSeries}B=buildSettleSeries;var I=B;var J={};var K=r;var L=e;var M=v;var N=a;var Q=g;function buildSettleParallel(){var r=Q.verifyArguments(arguments);var e=Q.getExtensions(L(r));e&&(r=K(r));function settleParallel(t){var a=Q.onSettled(t);N.map(r,M,e,a)}return settleParallel}J=buildSettleParallel;var R=J;var T={};T={series:E,parallel:z,settleSeries:I,settleParallel:R};var U=T;const V=T.series;export default U;export{V as series};

