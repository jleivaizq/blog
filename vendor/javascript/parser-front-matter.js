// parser-front-matter@1.6.4 downloaded from https://ga.jspm.io/npm:parser-front-matter@1.6.4/index.js

import t from"lazy-cache";import n from"extend-shallow";import e from"file-is-binary";import r from"gray-matter";import i from"mixin-deep";import o from"isobject";import c from"trim-leading-lines";import a from"buffer";var f={};var s=t(null);var l=null;require=s;n;e;r;i;o;c;require=l;s.isValidFile=function(t){t=t||{};return!s.isNull(t)&&!s.isBinary(t)};s.hasYFM=function(t){return t.data&&t.data.hasOwnProperty("yfm")};s.isNull=function isNull(t){t&&"function"!==typeof t.isNull&&(t.isNull=function(){return null===t.contents});return t.isNull()};f=s;var u=f;var y={};var p=a.Buffer;var m=u;var g=y;g.parse=function matterParse(t,n,e){if("function"===typeof n){e=n;n={}}if("function"!==typeof e)throw new TypeError("expected a callback function");try{e(null,g.parseSync(t,n))}catch(t){e(t)}};g.parseSync=function matterParseSync(t,n){if("string"===typeof t)t={contents:new p(t)};else if(!m.isObject(t))throw new TypeError("expected file to be a string or object");t.content&&!t.contents&&(t.contents=new p(t.content));t.data=t.data||{};if(!m.isValidFile(t)){t.content=t.contents.toString();t.orig=t.content;return t}try{var e=m.extend({strict:true},n,t.options);if(false===e.frontMatter){t.content=t.contents.toString();t.orig=t.content;return t}var r=t.contents.toString();var i=m.matter(r,e);t.orig=i.orig;t.data=m.merge({},t.data,i.data);t.content=m.trim(i.content);t.contents=new p(t.content);return t}catch(t){throw t}};g.stringify=function stringify(t,n,e){if("function"===typeof n){e=n;n={}}if("function"!==typeof e)throw new TypeError("expected a callback function");if(m.isValidFile(t)&&m.hasYFM(t))try{e(null,g.stringifySync(t,n))}catch(t){e(t)}else e(null,t)};g.stringifySync=function stringifySync(t,n){if("string"===typeof t)t={contents:new p(t)};else if(!m.isObject(t))throw new TypeError("expected file to be a string or object");t.content&&!t.contents&&(t.contents=new p(t.content));if(!m.isValidFile(t)||!m.hasYFM(t))return t;try{t.content=m.matter.stringify(t.content,t.data.yfm);delete t.data.yfm;return t}catch(t){throw t}};g.file=function(t,n){t.parseMatter=function(t){return g.parseSync(this,m.merge({},n,t))};t.stringifyMatter=function(t){return g.stringifySync(this,m.merge({},n,t))}};export default y;

